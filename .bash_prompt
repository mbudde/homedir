#!/bin/bash

NO_COLOR="\[\033[0m\]"
WHITE="\[\033[1;37m\]"
GRAY="\[\033[1;30m\]"
LIGHT_GRAY="\[\033[0;37m\]"

RED="\[\033[0;31m\]"
GREEN="\[\033[0;32m\]"
BLUE="\[\033[0;34m\]"
YELLOW="\[\033[1;33m\]"
LIGHT_RED="\[\033[1;31m\]"
LIGHT_GREEN="\[\033[1;32m\]"
LIGHT_BLUE="\[\033[1;34m\]"
PURPLE="\[\033[0;35m\]"
LIGHT_PURPLE="\[\033[1;35m\]"
CYAN="\[\033[0;36m\]"

LBRACE="${PURPLE}[${NO_COLOR}"
RBRACE="${PURPLE}]${NO_COLOR}"

prompt_command () {
    ret="$?"

    git_prompt () {
        if which git &> /dev/null; then
            local g="$(git rev-parse --git-dir 2>/dev/null)"
            if [ -n "$g" ]; then
                local r
                local b
                if [ -d "$g/rebase-apply" ]; then
                    if test -f "$g/rebase-apply/rebasing"; then
                        r="|REBASE"
                    elif test -f "$g/rebase-apply/applying"; then
                        r="|AM"
                    else
                        r="|AM/REBASE"
                    fi
                    b="$(git symbolic-ref HEAD 2>/dev/null)"
                elif [ -f "$g/rebase-merge/interactive" ]; then
                    r="|REBASE-i"
                    b="$(cat "$g/rebase-merge/head-name")"
                elif [ -d "$g/rebase-merge" ]; then
                    r="|REBASE-m"
                    b="$(cat "$g/rebase-merge/head-name")"
                elif [ -f "$g/MERGE_HEAD" ]; then
                    r="|MERGING"
                    b="$(git symbolic-ref HEAD 2>/dev/null)"
                else
                    if [ -f "$g/BISECT_LOG" ]; then
                        r="|BISECTING"
                    fi
                    if ! b="$(git symbolic-ref HEAD 2>/dev/null)"; then
                       if ! b="$(git describe --exact-match HEAD 2>/dev/null)"; then
                          b="$(cut -c1-7 "$g/HEAD")..."
                       fi
                    fi
                fi
                if [ -n "$1" ]; then
                     printf "$1" "${b##refs/heads/}$r"
                else
                     printf "%s" "${b##refs/heads/}$r"
                fi
            fi
        fi
    }

    bzr_prompt () {
        if which bzr &> /dev/null; then
            dir="$PWD"
            while [ "$dir" != "/" ]; do
                if [ -d "$dir/.bzr" ]; then
                    printf "bzr"
                    break
                fi
                dir=`dirname "$dir"`
            done
        fi
    }

    virtualenv_prompt () {
        if [ -n "$VIRTUAL_ENV" ]; then
            printf "$(basename "$VIRTUAL_ENV")"
        fi
    }

    # /foo/bar/baz => /f/bar/baz
    # /f/bar/baz => /f/b/baz
    shorten_path () {
        printf "%s" "$(echo $1 | sed 's|/\([^/]\)[^/]\{1,\}/|/\1/|')"
    }

    git="$(git_prompt)"
    bzr="$(bzr_prompt)"
    env="$(virtualenv_prompt)"
    hostname=$(hostname)
    cwd=$(pwd | sed "s|$HOME|~|")
    let maxlen=${COLUMNS}-${#hostname}-${#git}-${#bzr}-${#env}-23
    [ $ret -ge 1 ] && let maxlen-=${#ret}-3
    while [ ${#cwd} -gt $maxlen ]; do
        newcwd=$(shorten_path "$cwd")
        if [ "${newcwd}" = "${cwd}" ]; then
            break
        fi
        cwd="${newcwd}"
    done

    if [ -n "${git}" ];then
        if git diff-index --quiet HEAD 2>/dev/null ; then
            git="${LBRACE}${GREEN}${git}${RBRACE} "
        else
            git="${LBRACE}${YELLOW}${git}${RBRACE} "
        fi
    fi

    if [ -n "${bzr}" ]; then
        bzr="${LBRACE}${CYAN}${bzr}${RBRACE} "
    fi

    if [ -n "${env}" ]; then
        env="${LBRACE}${LIGHT_PURPLE}${env}${RBRACE} "
    fi

    if [ $ret -ge 1 ]; then
        ret="${LBRACE}${RED}${ret}${RBRACE} "
    else
        ret=""
    fi

    infoline="${LBRACE}${BLUE}\#${RBRACE} ${LBRACE}${BLUE}\t${RBRACE} ${env}${ret}${BLUE}\h${LIGHT_BLUE}:${BLUE}${cwd} ${git}${bzr}"

    PS1="${infoline}\n${PURPLE}\$ ${NO_COLOR}"
    PS2="${PURPLE}>${NO_COLOR} "

    # Set terminal title
    echo -ne "]0;${cwd}"
}

if echo $PROMPT_COMMAND | grep -v prompt_command >/dev/null ; then
    export PROMPT_COMMAND="prompt_command ; ${PROMPT_COMMAND:-:}"
fi
